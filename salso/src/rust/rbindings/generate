#!/usr/bin/env fish

### This script generates Rust bindings for the subset of R's C API that is used by the project.
### Rerun this only if additional functions or types are used from R's C API.

### You need to have the bindgen executable installed
# cargo install bindgen-cli --root . --version 0.77.1 --locked
# cargo install bindgen-cli --root .

### You also need to have ripgrep (i.e., the rg executable) installed...
# cargo install ripgrep

cd (readlink -f (dirname (status --current-filename)))
set CWD $PWD
set DEST "$CWD/src/lib.rs"

function usage
    echo "usage: $argv[0] [ PATH_OF_R_HEADER_FILES ]" >&2
    exit 1
end

if test (count $argv) -gt 1
    usage
end

if test (count $argv) -eq 0
    set INCLUDE_PATH (Rscript -e 'cat(R.home("include"))')
else
    set INCLUDE_PATH $argv[1]
end

echo "Header files directory: "$INCLUDE_PATH

set contents "//! Automatically generated bindings for R's C API. Do not edit.
#![allow(improper_ctypes)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(clippy::all)]
"

echo $contents >$DEST

cd $CWD/..
set MSRV (cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].rust_version')
echo "MSRV: $MSRV"

# Collect missing symbols from cargo check
set missing Rf_error R_CallMethodDef R_registerRoutines R_useDynamicSymbols R_forceSymbols Rf_rnorm
set missing $missing (cargo check 2>&1 | rg 'error.*cannot find.*in this scope' | rg -o '`[^`]+`' | tr -d '`' | sort -u)

# Build up bindgen arguments
set allowlist
for name in $missing
    set allowlist $allowlist --allowlist-function $name --allowlist-type $name --allowlist-var $name --allowlist-item $name
end

cd $CWD
$CWD/bin/bindgen $CWD/wrapper.h \
    --rust-target $MSRV \
    $allowlist \
    -- -I$INCLUDE_PATH >>$DEST
