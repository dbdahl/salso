// Generated by cargo: do not edit by hand

// If usage of .Call()/.Kall() functions in the package's R code changes, update
// this file by rerunning "cargo::register_calls(DIR)", where DIR is the root
// directory of this package.

/*
// Below is commented-out skeleton code that you can copy to your
// 'src/rustlib/src/lib.rs' file. You can change the body and arguments
// names of the functions, but changing the function name necessitates
// a corresponding change in the R code.

mod registration;
use roxido::*;

#[roxido]
fn bell(nItems: Rval) -> Rval {
    Rval::nil()
}

#[roxido]
fn enumerate_partitions(nItems: Rval) -> Rval {
    Rval::nil()
}

#[roxido]
fn expected_loss(partitions: Rval, unnamed1: Rval, unnamed2: Rval, unnamed3: Rval, unnamed4: Rval) -> Rval {
    Rval::nil()
}

#[roxido]
fn lbell(nItems: Rval) -> Rval {
    Rval::nil()
}

#[roxido]
fn minimize_by_enumeration(unnamed1: Rval, unnamed2: Rval, unnamed3: Rval) -> Rval {
    Rval::nil()
}

#[roxido]
fn psm(x: Rval, nCores: Rval) -> Rval {
    Rval::nil()
}

#[roxido]
fn minimize_by_salso(unnamed1: Rval, unnamed2: Rval, unnamed3: Rval, unnamed4: Rval, maxNClusters: Rval, nRunsX: Rval, seconds: Rval, maxScans: Rval, maxZealousAttempts: Rval, probSequentialAllocation: Rval, probSingletonsInitialization: Rval, nCores: Rval) -> Rval {
    Rval::nil()
}
*/

use roxido::*;

#[no_mangle]
extern "C" fn R_init_salso_librust(info: *mut rbindings::DllInfo) {
    let mut call_routines = Vec::with_capacity(7);
    let mut _names: Vec<std::ffi::CString> = Vec::with_capacity(7);
    _names.push(std::ffi::CString::new(".bell").unwrap());
    call_routines.push(rbindings::R_CallMethodDef {
        name: _names.last().unwrap().as_ptr(),
        fun: unsafe { std::mem::transmute(crate::bell as *const u8) },
        numArgs: 1,
    });
    _names.push(std::ffi::CString::new(".enumerate_partitions").unwrap());
    call_routines.push(rbindings::R_CallMethodDef {
        name: _names.last().unwrap().as_ptr(),
        fun: unsafe { std::mem::transmute(crate::enumerate_partitions as *const u8) },
        numArgs: 1,
    });
    _names.push(std::ffi::CString::new(".expected_loss").unwrap());
    call_routines.push(rbindings::R_CallMethodDef {
        name: _names.last().unwrap().as_ptr(),
        fun: unsafe { std::mem::transmute(crate::expected_loss as *const u8) },
        numArgs: 5,
    });
    _names.push(std::ffi::CString::new(".lbell").unwrap());
    call_routines.push(rbindings::R_CallMethodDef {
        name: _names.last().unwrap().as_ptr(),
        fun: unsafe { std::mem::transmute(crate::lbell as *const u8) },
        numArgs: 1,
    });
    _names.push(std::ffi::CString::new(".minimize_by_enumeration").unwrap());
    call_routines.push(rbindings::R_CallMethodDef {
        name: _names.last().unwrap().as_ptr(),
        fun: unsafe { std::mem::transmute(crate::minimize_by_enumeration as *const u8) },
        numArgs: 3,
    });
    _names.push(std::ffi::CString::new(".psm").unwrap());
    call_routines.push(rbindings::R_CallMethodDef {
        name: _names.last().unwrap().as_ptr(),
        fun: unsafe { std::mem::transmute(crate::psm as *const u8) },
        numArgs: 2,
    });
    _names.push(std::ffi::CString::new(".minimize_by_salso").unwrap());
    call_routines.push(rbindings::R_CallMethodDef {
        name: _names.last().unwrap().as_ptr(),
        fun: unsafe { std::mem::transmute(crate::minimize_by_salso as *const u8) },
        numArgs: 12,
    });
    call_routines.push(rbindings::R_CallMethodDef {
        name: std::ptr::null(),
        fun: None,
        numArgs: 0,
    });
    unsafe {
        rbindings::R_registerRoutines(
            info,
            std::ptr::null(),
            call_routines.as_ptr(),
            std::ptr::null(),
            std::ptr::null(),
        );
        rbindings::R_useDynamicSymbols(info, 1);
        rbindings::R_forceSymbols(info, 1);
    }
    roxido::r::set_custom_panic_hook();
}
